// Code generated by protoc-gen-go. DO NOT EDIT.
// source: coordinator.proto

package protoBuf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("coordinator.proto", fileDescriptor_99e779eb11ceee19) }

var fileDescriptor_99e779eb11ceee19 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0x5d, 0x8e, 0x82, 0x30,
	0x14, 0x46, 0x99, 0x97, 0x99, 0x49, 0x33, 0xc9, 0x68, 0x63, 0xfc, 0xe9, 0x23, 0xef, 0xf2, 0x80,
	0x1b, 0x10, 0x49, 0x5c, 0x40, 0x59, 0x01, 0xc2, 0xb5, 0x69, 0x02, 0x5c, 0xe8, 0x6d, 0x97, 0xe3,
	0x5e, 0x0d, 0xf5, 0x07, 0x24, 0xfa, 0xd4, 0xe4, 0x3b, 0x27, 0x27, 0xbd, 0x6c, 0x5e, 0x20, 0x9a,
	0x52, 0x37, 0xb9, 0x45, 0x13, 0xb5, 0x06, 0x2d, 0xf2, 0x5f, 0xff, 0x1c, 0xdc, 0x59, 0x2c, 0x0b,
	0xac, 0x5b, 0x67, 0x73, 0xab, 0xb1, 0xd9, 0xd6, 0xa4, 0xe8, 0x66, 0x88, 0x95, 0x01, 0xa5, 0xc9,
	0x9a, 0x29, 0x88, 0x33, 0xf6, 0x9f, 0x69, 0x0b, 0xe9, 0xd0, 0xe4, 0x7b, 0xf6, 0x27, 0xbd, 0x0d,
	0x26, 0xa9, 0x14, 0xf2, 0x45, 0xf4, 0xc8, 0x47, 0xbd, 0x2a, 0x41, 0x49, 0xe8, 0xc4, 0xfa, 0x75,
	0xed, 0x4d, 0x4f, 0x28, 0x0c, 0xe2, 0xcb, 0x17, 0x9b, 0xa5, 0x15, 0xba, 0x72, 0x9c, 0x3d, 0x4e,
	0xb2, 0x9b, 0x21, 0xe0, 0xdd, 0x67, 0xa1, 0x13, 0x1f, 0x11, 0x85, 0x01, 0x4f, 0xd8, 0x4f, 0xea,
	0x8f, 0x04, 0x3e, 0xfa, 0xc3, 0x7d, 0x92, 0xd0, 0x39, 0x20, 0x2b, 0xc4, 0x1b, 0x42, 0x2d, 0x36,
	0xd4, 0x27, 0x4e, 0xdf, 0x1e, 0xee, 0xae, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2a, 0x5e, 0xea, 0xd0,
	0x4b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SiteCoordinatorClient is the client API for SiteCoordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SiteCoordinatorClient interface {
	// Registers an algorithm from a site at the coordinator
	RegisterAlgo(ctx context.Context, in *SiteRegReq, opts ...grpc.CallOption) (*SiteAlgoRegRes, error)
}

type siteCoordinatorClient struct {
	cc *grpc.ClientConn
}

func NewSiteCoordinatorClient(cc *grpc.ClientConn) SiteCoordinatorClient {
	return &siteCoordinatorClient{cc}
}

func (c *siteCoordinatorClient) RegisterAlgo(ctx context.Context, in *SiteRegReq, opts ...grpc.CallOption) (*SiteAlgoRegRes, error) {
	out := new(SiteAlgoRegRes)
	err := c.cc.Invoke(ctx, "/protoBuf.SiteCoordinator/RegisterAlgo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiteCoordinatorServer is the server API for SiteCoordinator service.
type SiteCoordinatorServer interface {
	// Registers an algorithm from a site at the coordinator
	RegisterAlgo(context.Context, *SiteRegReq) (*SiteAlgoRegRes, error)
}

// UnimplementedSiteCoordinatorServer can be embedded to have forward compatible implementations.
type UnimplementedSiteCoordinatorServer struct {
}

func (*UnimplementedSiteCoordinatorServer) RegisterAlgo(ctx context.Context, req *SiteRegReq) (*SiteAlgoRegRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAlgo not implemented")
}

func RegisterSiteCoordinatorServer(s *grpc.Server, srv SiteCoordinatorServer) {
	s.RegisterService(&_SiteCoordinator_serviceDesc, srv)
}

func _SiteCoordinator_RegisterAlgo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiteRegReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteCoordinatorServer).RegisterAlgo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuf.SiteCoordinator/RegisterAlgo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteCoordinatorServer).RegisterAlgo(ctx, req.(*SiteRegReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SiteCoordinator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoBuf.SiteCoordinator",
	HandlerType: (*SiteCoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAlgo",
			Handler:    _SiteCoordinator_RegisterAlgo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordinator.proto",
}

// CloudCoordinatorClient is the client API for CloudCoordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CloudCoordinatorClient interface {
	// Registers an algorithm from the cloud at the coordinator
	RegisterAlgo(ctx context.Context, in *CloudAlgoRegReq, opts ...grpc.CallOption) (*CloudAlgoRegRes, error)
	// Relays a computation request from the cloud to appropriate sites
	Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponses, error)
}

type cloudCoordinatorClient struct {
	cc *grpc.ClientConn
}

func NewCloudCoordinatorClient(cc *grpc.ClientConn) CloudCoordinatorClient {
	return &cloudCoordinatorClient{cc}
}

func (c *cloudCoordinatorClient) RegisterAlgo(ctx context.Context, in *CloudAlgoRegReq, opts ...grpc.CallOption) (*CloudAlgoRegRes, error) {
	out := new(CloudAlgoRegRes)
	err := c.cc.Invoke(ctx, "/protoBuf.CloudCoordinator/RegisterAlgo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cloudCoordinatorClient) Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponses, error) {
	out := new(ComputeResponses)
	err := c.cc.Invoke(ctx, "/protoBuf.CloudCoordinator/Compute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudCoordinatorServer is the server API for CloudCoordinator service.
type CloudCoordinatorServer interface {
	// Registers an algorithm from the cloud at the coordinator
	RegisterAlgo(context.Context, *CloudAlgoRegReq) (*CloudAlgoRegRes, error)
	// Relays a computation request from the cloud to appropriate sites
	Compute(context.Context, *ComputeRequest) (*ComputeResponses, error)
}

// UnimplementedCloudCoordinatorServer can be embedded to have forward compatible implementations.
type UnimplementedCloudCoordinatorServer struct {
}

func (*UnimplementedCloudCoordinatorServer) RegisterAlgo(ctx context.Context, req *CloudAlgoRegReq) (*CloudAlgoRegRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAlgo not implemented")
}
func (*UnimplementedCloudCoordinatorServer) Compute(ctx context.Context, req *ComputeRequest) (*ComputeResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compute not implemented")
}

func RegisterCloudCoordinatorServer(s *grpc.Server, srv CloudCoordinatorServer) {
	s.RegisterService(&_CloudCoordinator_serviceDesc, srv)
}

func _CloudCoordinator_RegisterAlgo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudAlgoRegReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCoordinatorServer).RegisterAlgo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuf.CloudCoordinator/RegisterAlgo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCoordinatorServer).RegisterAlgo(ctx, req.(*CloudAlgoRegReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CloudCoordinator_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudCoordinatorServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuf.CloudCoordinator/Compute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudCoordinatorServer).Compute(ctx, req.(*ComputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CloudCoordinator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoBuf.CloudCoordinator",
	HandlerType: (*CloudCoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAlgo",
			Handler:    _CloudCoordinator_RegisterAlgo_Handler,
		},
		{
			MethodName: "Compute",
			Handler:    _CloudCoordinator_Compute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordinator.proto",
}
