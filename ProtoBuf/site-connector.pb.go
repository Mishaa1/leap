// Code generated by protoc-gen-go. DO NOT EDIT.
// source: site-connector.proto

package protoBuf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("site-connector.proto", fileDescriptor_41fa8436fed07179) }

var fileDescriptor_41fa8436fed07179 = []byte{
	// 141 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0xce, 0x2c, 0x49,
	0xd5, 0x4d, 0xce, 0xcf, 0xcb, 0x4b, 0x4d, 0x2e, 0xc9, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x00, 0x53, 0x4e, 0xa5, 0x69, 0x52, 0x62, 0xc9, 0xf9, 0xb9, 0x05, 0xa5, 0x25, 0x89,
	0x25, 0x99, 0xf9, 0x79, 0xba, 0xb9, 0xc5, 0xe9, 0xc5, 0x10, 0x15, 0x46, 0xfc, 0x5c, 0xbc, 0x8e,
	0x39, 0xe9, 0xf9, 0xce, 0x30, 0x8d, 0x46, 0x11, 0x5c, 0x22, 0xce, 0xf9, 0xf9, 0x45, 0x29, 0x99,
	0x79, 0x89, 0x25, 0xf9, 0x45, 0x70, 0x71, 0x21, 0x07, 0x2e, 0x76, 0x67, 0xb0, 0x11, 0xa9, 0x42,
	0x12, 0x7a, 0x30, 0x63, 0xf5, 0xa0, 0x42, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x52, 0x92,
	0x58, 0x64, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x95, 0x18, 0x92, 0xd8, 0xc0, 0x72, 0xc6, 0x80,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe9, 0xb5, 0xcd, 0x9c, 0xab, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AlgoConnectorClient is the client API for AlgoConnector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AlgoConnectorClient interface {
}

type algoConnectorClient struct {
	cc *grpc.ClientConn
}

func NewAlgoConnectorClient(cc *grpc.ClientConn) AlgoConnectorClient {
	return &algoConnectorClient{cc}
}

// AlgoConnectorServer is the server API for AlgoConnector service.
type AlgoConnectorServer interface {
}

// UnimplementedAlgoConnectorServer can be embedded to have forward compatible implementations.
type UnimplementedAlgoConnectorServer struct {
}

func RegisterAlgoConnectorServer(s *grpc.Server, srv AlgoConnectorServer) {
	s.RegisterService(&_AlgoConnector_serviceDesc, srv)
}

var _AlgoConnector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoBuf.AlgoConnector",
	HandlerType: (*AlgoConnectorServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "site-connector.proto",
}

// CoordinatorConnectorClient is the client API for CoordinatorConnector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoordinatorConnectorClient interface {
	// // Relays a computation request from the coordinato to appropriate algorithm in site
	Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error)
}

type coordinatorConnectorClient struct {
	cc *grpc.ClientConn
}

func NewCoordinatorConnectorClient(cc *grpc.ClientConn) CoordinatorConnectorClient {
	return &coordinatorConnectorClient{cc}
}

func (c *coordinatorConnectorClient) Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error) {
	out := new(ComputeResponse)
	err := c.cc.Invoke(ctx, "/protoBuf.CoordinatorConnector/Compute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorConnectorServer is the server API for CoordinatorConnector service.
type CoordinatorConnectorServer interface {
	// // Relays a computation request from the coordinato to appropriate algorithm in site
	Compute(context.Context, *ComputeRequest) (*ComputeResponse, error)
}

// UnimplementedCoordinatorConnectorServer can be embedded to have forward compatible implementations.
type UnimplementedCoordinatorConnectorServer struct {
}

func (*UnimplementedCoordinatorConnectorServer) Compute(ctx context.Context, req *ComputeRequest) (*ComputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compute not implemented")
}

func RegisterCoordinatorConnectorServer(s *grpc.Server, srv CoordinatorConnectorServer) {
	s.RegisterService(&_CoordinatorConnector_serviceDesc, srv)
}

func _CoordinatorConnector_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorConnectorServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuf.CoordinatorConnector/Compute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorConnectorServer).Compute(ctx, req.(*ComputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoordinatorConnector_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoBuf.CoordinatorConnector",
	HandlerType: (*CoordinatorConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compute",
			Handler:    _CoordinatorConnector_Compute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "site-connector.proto",
}
