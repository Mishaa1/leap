// Code generated by protoc-gen-go. DO NOT EDIT.
// source: site-algos.proto

package protoBuf

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("site-algos.proto", fileDescriptor_513e27bc7b19dc7f) }

var fileDescriptor_513e27bc7b19dc7f = []byte{
	// 120 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0xce, 0x2c, 0x49,
	0xd5, 0x4d, 0xcc, 0x49, 0xcf, 0x2f, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53,
	0x4e, 0xa5, 0x69, 0x52, 0x62, 0xc9, 0xf9, 0xb9, 0x05, 0xa5, 0x25, 0x89, 0x25, 0x99, 0xf9, 0x79,
	0xba, 0xb9, 0xc5, 0xe9, 0x50, 0x15, 0x46, 0x3e, 0x5c, 0x1c, 0xc1, 0x99, 0x25, 0xa9, 0x8e, 0x39,
	0xe9, 0xf9, 0x42, 0x0e, 0x5c, 0xec, 0xce, 0x60, 0x55, 0xa9, 0x42, 0x12, 0x7a, 0x30, 0x9d, 0x7a,
	0x50, 0xa1, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x29, 0x49, 0x2c, 0x32, 0xc5, 0x05, 0xf9,
	0x79, 0xc5, 0xa9, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x39, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xc3, 0x6c, 0x71, 0xc3, 0x8a, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SiteAlgoClient is the client API for SiteAlgo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SiteAlgoClient interface {
	// Performs the appropriate computation at the host algo and returns the result.
	Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error)
}

type siteAlgoClient struct {
	cc *grpc.ClientConn
}

func NewSiteAlgoClient(cc *grpc.ClientConn) SiteAlgoClient {
	return &siteAlgoClient{cc}
}

func (c *siteAlgoClient) Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error) {
	out := new(ComputeResponse)
	err := c.cc.Invoke(ctx, "/protoBuf.SiteAlgo/Compute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SiteAlgoServer is the server API for SiteAlgo service.
type SiteAlgoServer interface {
	// Performs the appropriate computation at the host algo and returns the result.
	Compute(context.Context, *ComputeRequest) (*ComputeResponse, error)
}

// UnimplementedSiteAlgoServer can be embedded to have forward compatible implementations.
type UnimplementedSiteAlgoServer struct {
}

func (*UnimplementedSiteAlgoServer) Compute(ctx context.Context, req *ComputeRequest) (*ComputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compute not implemented")
}

func RegisterSiteAlgoServer(s *grpc.Server, srv SiteAlgoServer) {
	s.RegisterService(&_SiteAlgo_serviceDesc, srv)
}

func _SiteAlgo_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SiteAlgoServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protoBuf.SiteAlgo/Compute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SiteAlgoServer).Compute(ctx, req.(*ComputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SiteAlgo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protoBuf.SiteAlgo",
	HandlerType: (*SiteAlgoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compute",
			Handler:    _SiteAlgo_Compute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "site-algos.proto",
}
