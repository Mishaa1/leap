syntax = "proto3";
package protoBuf;

// To compile the protobuf to Go run the following inside the protoBuf folder:
// protoc -I=. --go_out=plugins=grpc:.  message.proto

// To compile the protobuf to Python run the following inside the protoBuf folder:
// python -m grpc_tools.protoc -I=. --python_out=../cloud-algos/ --grpc_python_out=../cloud-algos/ message.proto

// RPC service at the coordinator that will handle requests from sites
service SiteCoordinator {
    rpc RegisterSiteAlgo (SiteAlgoRegReq) returns (SiteAlgoRegRes) {}
}

// RPC service at the coordinator that will handle requests from cloud algorithms
service CloudCoordinator {
    rpc RegisterCloudAlgo (CloudAlgoRegReq) returns (CloudAlgoRegRes) {}
    rpc AlgoRequest (ComputeRequest) returns (ComputeResponses) {}
}

// RPC service at a site connector that will handle requests from site algorithms
service AlgoConnector {

}

// RPC service at a site connector that will handle requests from coordinator
service CoordinatorConnector {
    rpc AlgoRequest (ComputeRequest) returns (ComputeResponse) {}
}

// Message sent by a site connector to a coordinator with the intent of registering the site and its available algos
message SiteRegReq { // Site Registration Request
    int32 id = 1;
    string name = 2;
    repeated SiteAlgoRegReq algos = 4;
}

// Message sent by a site connector to a coordinator indicating an algorithm it wants to register
message SiteAlgoRegReq { // Site Algorithm Registration Request
    int32 id = 1;
    string description = 2;
    string protoVersion = 3;
}

message SiteRegRes { // Site Registration Response
    bool success = 1;
    string msg = 2;
}

// Message sent by a coordinator to a site connector indicating whether the algorithm registration was successful
message SiteAlgoRegRes { // Site Algorithm Registration Response
    bool success = 1;
    string msg = 2;
}

// Message sent by a cloud algorithm to a coordinator indicating this algorithm should be registered
message CloudAlgoRegReq { // Cloud Algorithm Registration Request
    int32 id = 1;
    string description = 2;
    string proto_version = 3;
}

// Message sent by a coordinator to a cloud algorithm indicating whether the algorithm registration was successful
message CloudAlgoRegRes { // Cloud Algorithm Registration Response
    bool success = 1;
    string msg = 2;
}

// Message relayed by an algo to coordinator and site-connector that contains the query to be performed and algo id
message ComputeRequest {
    int32 algo_id = 1;
    Query query = 2;
}

// Simple example query
message Query {
    string operator = 1;
    string field = 2;
    string string_value = 3;
    int32  numeric_value = 4;
}

message ComputeResponse {
    int32 response = 1;
}

message ComputeResponses {
    repeated ComputeResponse responses = 1;
}

message Patient {
    string first_name = 1;
    string last_name = 2;
    string email = 3;
    int32 age = 4;

    enum Gender {
        MALE = 0;
        FEMALE = 1;
        OTHER = 2;
    }

    Gender gender = 5;
    float weight = 6;  // Weight in kilograms
    int32 height = 7;  // Height in centimeters
}