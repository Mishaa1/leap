// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: proto/coordinator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_proto_coordinator_proto protoreflect.FileDescriptor

var file_proto_coordinator_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2d, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2d, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x2d, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x2d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2d, 0x6d, 0x73, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xcc, 0x03, 0x0a, 0x0b,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x0c, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x74, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x52, 0x65, 0x67, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x46, 0x0a, 0x0e, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x74,
	0x65, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x69, 0x74, 0x65, 0x73, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x3a, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0c,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x52, 0x65, 0x71, 0x1a,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x67, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x08, 0x41, 0x75, 0x74, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_proto_coordinator_proto_goTypes = []interface{}{
	(*SiteRegReq)(nil),               // 0: proto.SiteRegReq
	(*MapRequestChunk)(nil),          // 1: proto.MapRequestChunk
	(*SitesAvailableReq)(nil),        // 2: proto.SitesAvailableReq
	(*SelectorVerificationsReq)(nil), // 3: proto.SelectorVerificationsReq
	(*ComputeRequest)(nil),           // 4: proto.ComputeRequest
	(*UserRegReq)(nil),               // 5: proto.UserRegReq
	(*UserAuthReq)(nil),              // 6: proto.UserAuthReq
	(*SiteRegRes)(nil),               // 7: proto.SiteRegRes
	(*MapResponsesChunk)(nil),        // 8: proto.MapResponsesChunk
	(*SitesAvailableRes)(nil),        // 9: proto.SitesAvailableRes
	(*SelectorVerificationsRes)(nil), // 10: proto.SelectorVerificationsRes
	(*ComputeResponse)(nil),          // 11: proto.ComputeResponse
	(*UserRegRes)(nil),               // 12: proto.UserRegRes
	(*UserAuthRes)(nil),              // 13: proto.UserAuthRes
}
var file_proto_coordinator_proto_depIdxs = []int32{
	0,  // 0: proto.Coordinator.RegisterSite:input_type -> proto.SiteRegReq
	1,  // 1: proto.Coordinator.Map:input_type -> proto.MapRequestChunk
	2,  // 2: proto.Coordinator.SitesAvailable:input_type -> proto.SitesAvailableReq
	3,  // 3: proto.Coordinator.VerifySelector:input_type -> proto.SelectorVerificationsReq
	4,  // 4: proto.Coordinator.Compute:input_type -> proto.ComputeRequest
	5,  // 5: proto.Coordinator.RegisterUser:input_type -> proto.UserRegReq
	6,  // 6: proto.Coordinator.AuthUser:input_type -> proto.UserAuthReq
	7,  // 7: proto.Coordinator.RegisterSite:output_type -> proto.SiteRegRes
	8,  // 8: proto.Coordinator.Map:output_type -> proto.MapResponsesChunk
	9,  // 9: proto.Coordinator.SitesAvailable:output_type -> proto.SitesAvailableRes
	10, // 10: proto.Coordinator.VerifySelector:output_type -> proto.SelectorVerificationsRes
	11, // 11: proto.Coordinator.Compute:output_type -> proto.ComputeResponse
	12, // 12: proto.Coordinator.RegisterUser:output_type -> proto.UserRegRes
	13, // 13: proto.Coordinator.AuthUser:output_type -> proto.UserAuthRes
	7,  // [7:14] is the sub-list for method output_type
	0,  // [0:7] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_proto_coordinator_proto_init() }
func file_proto_coordinator_proto_init() {
	if File_proto_coordinator_proto != nil {
		return
	}
	file_proto_computation_msgs_proto_init()
	file_proto_registration_msgs_proto_init()
	file_proto_availability_msgs_proto_init()
	file_proto_user_msgs_proto_init()
	file_proto_selector_verification_msgs_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_coordinator_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_coordinator_proto_goTypes,
		DependencyIndexes: file_proto_coordinator_proto_depIdxs,
	}.Build()
	File_proto_coordinator_proto = out.File
	file_proto_coordinator_proto_rawDesc = nil
	file_proto_coordinator_proto_goTypes = nil
	file_proto_coordinator_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CoordinatorClient is the client API for Coordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoordinatorClient interface {
	// Registers an algorithm from a site at the coordinator
	RegisterSite(ctx context.Context, in *SiteRegReq, opts ...grpc.CallOption) (*SiteRegRes, error)
	// Relays a computation request from the cloud to appropriate sites
	//rpc Map (MapRequest) returns (MapResponses) {}
	Map(ctx context.Context, opts ...grpc.CallOption) (Coordinator_MapClient, error)
	// Pinged by others to determine what sites are available
	SitesAvailable(ctx context.Context, in *SitesAvailableReq, opts ...grpc.CallOption) (*SitesAvailableRes, error)
	// Sends a request to all sites to verify the selector
	VerifySelector(ctx context.Context, in *SelectorVerificationsReq, opts ...grpc.CallOption) (*SelectorVerificationsRes, error)
	// Sends computation request to cloud algo
	Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error)
	// Registers a user with the coordinator
	RegisterUser(ctx context.Context, in *UserRegReq, opts ...grpc.CallOption) (*UserRegRes, error)
	// Authenticates a user with the coordinator
	AuthUser(ctx context.Context, in *UserAuthReq, opts ...grpc.CallOption) (*UserAuthRes, error)
}

type coordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorClient(cc grpc.ClientConnInterface) CoordinatorClient {
	return &coordinatorClient{cc}
}

func (c *coordinatorClient) RegisterSite(ctx context.Context, in *SiteRegReq, opts ...grpc.CallOption) (*SiteRegRes, error) {
	out := new(SiteRegRes)
	err := c.cc.Invoke(ctx, "/proto.Coordinator/RegisterSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) Map(ctx context.Context, opts ...grpc.CallOption) (Coordinator_MapClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Coordinator_serviceDesc.Streams[0], "/proto.Coordinator/Map", opts...)
	if err != nil {
		return nil, err
	}
	x := &coordinatorMapClient{stream}
	return x, nil
}

type Coordinator_MapClient interface {
	Send(*MapRequestChunk) error
	Recv() (*MapResponsesChunk, error)
	grpc.ClientStream
}

type coordinatorMapClient struct {
	grpc.ClientStream
}

func (x *coordinatorMapClient) Send(m *MapRequestChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *coordinatorMapClient) Recv() (*MapResponsesChunk, error) {
	m := new(MapResponsesChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coordinatorClient) SitesAvailable(ctx context.Context, in *SitesAvailableReq, opts ...grpc.CallOption) (*SitesAvailableRes, error) {
	out := new(SitesAvailableRes)
	err := c.cc.Invoke(ctx, "/proto.Coordinator/SitesAvailable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) VerifySelector(ctx context.Context, in *SelectorVerificationsReq, opts ...grpc.CallOption) (*SelectorVerificationsRes, error) {
	out := new(SelectorVerificationsRes)
	err := c.cc.Invoke(ctx, "/proto.Coordinator/VerifySelector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error) {
	out := new(ComputeResponse)
	err := c.cc.Invoke(ctx, "/proto.Coordinator/Compute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) RegisterUser(ctx context.Context, in *UserRegReq, opts ...grpc.CallOption) (*UserRegRes, error) {
	out := new(UserRegRes)
	err := c.cc.Invoke(ctx, "/proto.Coordinator/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) AuthUser(ctx context.Context, in *UserAuthReq, opts ...grpc.CallOption) (*UserAuthRes, error) {
	out := new(UserAuthRes)
	err := c.cc.Invoke(ctx, "/proto.Coordinator/AuthUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorServer is the server API for Coordinator service.
type CoordinatorServer interface {
	// Registers an algorithm from a site at the coordinator
	RegisterSite(context.Context, *SiteRegReq) (*SiteRegRes, error)
	// Relays a computation request from the cloud to appropriate sites
	//rpc Map (MapRequest) returns (MapResponses) {}
	Map(Coordinator_MapServer) error
	// Pinged by others to determine what sites are available
	SitesAvailable(context.Context, *SitesAvailableReq) (*SitesAvailableRes, error)
	// Sends a request to all sites to verify the selector
	VerifySelector(context.Context, *SelectorVerificationsReq) (*SelectorVerificationsRes, error)
	// Sends computation request to cloud algo
	Compute(context.Context, *ComputeRequest) (*ComputeResponse, error)
	// Registers a user with the coordinator
	RegisterUser(context.Context, *UserRegReq) (*UserRegRes, error)
	// Authenticates a user with the coordinator
	AuthUser(context.Context, *UserAuthReq) (*UserAuthRes, error)
}

// UnimplementedCoordinatorServer can be embedded to have forward compatible implementations.
type UnimplementedCoordinatorServer struct {
}

func (*UnimplementedCoordinatorServer) RegisterSite(context.Context, *SiteRegReq) (*SiteRegRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterSite not implemented")
}
func (*UnimplementedCoordinatorServer) Map(Coordinator_MapServer) error {
	return status.Errorf(codes.Unimplemented, "method Map not implemented")
}
func (*UnimplementedCoordinatorServer) SitesAvailable(context.Context, *SitesAvailableReq) (*SitesAvailableRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SitesAvailable not implemented")
}
func (*UnimplementedCoordinatorServer) VerifySelector(context.Context, *SelectorVerificationsReq) (*SelectorVerificationsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySelector not implemented")
}
func (*UnimplementedCoordinatorServer) Compute(context.Context, *ComputeRequest) (*ComputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compute not implemented")
}
func (*UnimplementedCoordinatorServer) RegisterUser(context.Context, *UserRegReq) (*UserRegRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedCoordinatorServer) AuthUser(context.Context, *UserAuthReq) (*UserAuthRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthUser not implemented")
}

func RegisterCoordinatorServer(s *grpc.Server, srv CoordinatorServer) {
	s.RegisterService(&_Coordinator_serviceDesc, srv)
}

func _Coordinator_RegisterSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SiteRegReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).RegisterSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Coordinator/RegisterSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).RegisterSite(ctx, req.(*SiteRegReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_Map_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CoordinatorServer).Map(&coordinatorMapServer{stream})
}

type Coordinator_MapServer interface {
	Send(*MapResponsesChunk) error
	Recv() (*MapRequestChunk, error)
	grpc.ServerStream
}

type coordinatorMapServer struct {
	grpc.ServerStream
}

func (x *coordinatorMapServer) Send(m *MapResponsesChunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *coordinatorMapServer) Recv() (*MapRequestChunk, error) {
	m := new(MapRequestChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Coordinator_SitesAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SitesAvailableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).SitesAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Coordinator/SitesAvailable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).SitesAvailable(ctx, req.(*SitesAvailableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_VerifySelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectorVerificationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).VerifySelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Coordinator/VerifySelector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).VerifySelector(ctx, req.(*SelectorVerificationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Coordinator/Compute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).Compute(ctx, req.(*ComputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRegReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Coordinator/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).RegisterUser(ctx, req.(*UserRegReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_AuthUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAuthReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).AuthUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Coordinator/AuthUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).AuthUser(ctx, req.(*UserAuthReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Coordinator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Coordinator",
	HandlerType: (*CoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterSite",
			Handler:    _Coordinator_RegisterSite_Handler,
		},
		{
			MethodName: "SitesAvailable",
			Handler:    _Coordinator_SitesAvailable_Handler,
		},
		{
			MethodName: "VerifySelector",
			Handler:    _Coordinator_VerifySelector_Handler,
		},
		{
			MethodName: "Compute",
			Handler:    _Coordinator_Compute_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _Coordinator_RegisterUser_Handler,
		},
		{
			MethodName: "AuthUser",
			Handler:    _Coordinator_AuthUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Map",
			Handler:       _Coordinator_Map_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/coordinator.proto",
}
