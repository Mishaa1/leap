# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto import availability_msgs_pb2 as proto_dot_availability__msgs__pb2
from proto import computation_msgs_pb2 as proto_dot_computation__msgs__pb2
from proto import registration_msgs_pb2 as proto_dot_registration__msgs__pb2
from proto import selector_verification_msgs_pb2 as proto_dot_selector__verification__msgs__pb2
from proto import user_msgs_pb2 as proto_dot_user__msgs__pb2


class CoordinatorStub(object):
    """RPC service at the coordinator that will handle requests from sites and cloud algos
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterSite = channel.unary_unary(
                '/proto.Coordinator/RegisterSite',
                request_serializer=proto_dot_registration__msgs__pb2.SiteRegReq.SerializeToString,
                response_deserializer=proto_dot_registration__msgs__pb2.SiteRegRes.FromString,
                )
        self.Map = channel.stream_stream(
                '/proto.Coordinator/Map',
                request_serializer=proto_dot_computation__msgs__pb2.MapRequestChunk.SerializeToString,
                response_deserializer=proto_dot_computation__msgs__pb2.MapResponsesChunk.FromString,
                )
        self.SitesAvailable = channel.unary_unary(
                '/proto.Coordinator/SitesAvailable',
                request_serializer=proto_dot_availability__msgs__pb2.SitesAvailableReq.SerializeToString,
                response_deserializer=proto_dot_availability__msgs__pb2.SitesAvailableRes.FromString,
                )
        self.VerifySelector = channel.unary_unary(
                '/proto.Coordinator/VerifySelector',
                request_serializer=proto_dot_selector__verification__msgs__pb2.SelectorVerificationsReq.SerializeToString,
                response_deserializer=proto_dot_selector__verification__msgs__pb2.SelectorVerificationsRes.FromString,
                )
        self.Compute = channel.unary_unary(
                '/proto.Coordinator/Compute',
                request_serializer=proto_dot_computation__msgs__pb2.ComputeRequest.SerializeToString,
                response_deserializer=proto_dot_computation__msgs__pb2.ComputeResponse.FromString,
                )
        self.RegisterUser = channel.unary_unary(
                '/proto.Coordinator/RegisterUser',
                request_serializer=proto_dot_user__msgs__pb2.UserRegReq.SerializeToString,
                response_deserializer=proto_dot_user__msgs__pb2.UserRegRes.FromString,
                )
        self.AuthUser = channel.unary_unary(
                '/proto.Coordinator/AuthUser',
                request_serializer=proto_dot_user__msgs__pb2.UserAuthReq.SerializeToString,
                response_deserializer=proto_dot_user__msgs__pb2.UserAuthRes.FromString,
                )


class CoordinatorServicer(object):
    """RPC service at the coordinator that will handle requests from sites and cloud algos
    """

    def RegisterSite(self, request, context):
        """Registers an algorithm from a site at the coordinator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Map(self, request_iterator, context):
        """Relays a computation request from the cloud to appropriate sites
        rpc Map (MapRequest) returns (MapResponses) {}
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SitesAvailable(self, request, context):
        """Pinged by others to determine what sites are available
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VerifySelector(self, request, context):
        """Sends a request to all sites to verify the selector
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Compute(self, request, context):
        """Sends computation request to cloud algo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterUser(self, request, context):
        """Registers a user with the coordinator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthUser(self, request, context):
        """Authenticates a user with the coordinator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoordinatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterSite': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterSite,
                    request_deserializer=proto_dot_registration__msgs__pb2.SiteRegReq.FromString,
                    response_serializer=proto_dot_registration__msgs__pb2.SiteRegRes.SerializeToString,
            ),
            'Map': grpc.stream_stream_rpc_method_handler(
                    servicer.Map,
                    request_deserializer=proto_dot_computation__msgs__pb2.MapRequestChunk.FromString,
                    response_serializer=proto_dot_computation__msgs__pb2.MapResponsesChunk.SerializeToString,
            ),
            'SitesAvailable': grpc.unary_unary_rpc_method_handler(
                    servicer.SitesAvailable,
                    request_deserializer=proto_dot_availability__msgs__pb2.SitesAvailableReq.FromString,
                    response_serializer=proto_dot_availability__msgs__pb2.SitesAvailableRes.SerializeToString,
            ),
            'VerifySelector': grpc.unary_unary_rpc_method_handler(
                    servicer.VerifySelector,
                    request_deserializer=proto_dot_selector__verification__msgs__pb2.SelectorVerificationsReq.FromString,
                    response_serializer=proto_dot_selector__verification__msgs__pb2.SelectorVerificationsRes.SerializeToString,
            ),
            'Compute': grpc.unary_unary_rpc_method_handler(
                    servicer.Compute,
                    request_deserializer=proto_dot_computation__msgs__pb2.ComputeRequest.FromString,
                    response_serializer=proto_dot_computation__msgs__pb2.ComputeResponse.SerializeToString,
            ),
            'RegisterUser': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterUser,
                    request_deserializer=proto_dot_user__msgs__pb2.UserRegReq.FromString,
                    response_serializer=proto_dot_user__msgs__pb2.UserRegRes.SerializeToString,
            ),
            'AuthUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthUser,
                    request_deserializer=proto_dot_user__msgs__pb2.UserAuthReq.FromString,
                    response_serializer=proto_dot_user__msgs__pb2.UserAuthRes.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.Coordinator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Coordinator(object):
    """RPC service at the coordinator that will handle requests from sites and cloud algos
    """

    @staticmethod
    def RegisterSite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.Coordinator/RegisterSite',
            proto_dot_registration__msgs__pb2.SiteRegReq.SerializeToString,
            proto_dot_registration__msgs__pb2.SiteRegRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Map(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/proto.Coordinator/Map',
            proto_dot_computation__msgs__pb2.MapRequestChunk.SerializeToString,
            proto_dot_computation__msgs__pb2.MapResponsesChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SitesAvailable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.Coordinator/SitesAvailable',
            proto_dot_availability__msgs__pb2.SitesAvailableReq.SerializeToString,
            proto_dot_availability__msgs__pb2.SitesAvailableRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VerifySelector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.Coordinator/VerifySelector',
            proto_dot_selector__verification__msgs__pb2.SelectorVerificationsReq.SerializeToString,
            proto_dot_selector__verification__msgs__pb2.SelectorVerificationsRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Compute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.Coordinator/Compute',
            proto_dot_computation__msgs__pb2.ComputeRequest.SerializeToString,
            proto_dot_computation__msgs__pb2.ComputeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.Coordinator/RegisterUser',
            proto_dot_user__msgs__pb2.UserRegReq.SerializeToString,
            proto_dot_user__msgs__pb2.UserRegRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AuthUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/proto.Coordinator/AuthUser',
            proto_dot_user__msgs__pb2.UserAuthReq.SerializeToString,
            proto_dot_user__msgs__pb2.UserAuthRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
